moto@Vlads-MacBook-Pro lnbits % node play.js
### play.js
### file backups.nix
### file.lines 130
### result {
  "service": "services.backups",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Enable backups of node data.\nThis uses the NixOS duplicity service.\nTo further configure the backup, you can set NixOS options `services.duplicity.*`.\nThe `services.duplicity.cleanup.*` options are particularly useful.",
      "name": "enable"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Whether to also backup Bitcoin blockchain and other bulk data.",
      "name": "with-bulk-data"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "file:///var/lib/localBackups",
      "description": "Where to back up to.",
      "name": "destination"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Run backup with the given frequency. If null, do not run automatically.",
      "name": "frequency"
    },
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [],
      "description": "List of database names to backup.",
      "name": "postgresqlDatabases"
    },
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [],
      "description": "Additional files to be appended to filelist.",
      "name": "extraFiles"
    }
  ]
}
### file bitcoind-rpc-public-whitelist.nix
### file.lines 66
### result {
  "service": "",
  "options": []
}
### file bitcoind.nix
### file.lines 461
### result {
  "service": "bitcoind",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for peer connections.",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 8333,
      "description": "Port to listen for peer connections.",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Port to listen for Tor peer connections.\nIf set, inbound connections to this port are tagged as onion peers.",
      "name": "onionPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Listen for peer connections at `address:port`\nand `address:onionPort` (if {option}`onionPort` is set).",
      "name": "listen"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Listen for peer connections at `address:whitelistedPort`.\nPeers connected through this socket are automatically whitelisted.",
      "name": "listenWhitelisted"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 8335,
      "description": "See `listenWhitelisted`.",
      "name": "whitelistedPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "",
      "description": "Bash expression which outputs the public service address to announce to peers.\nIf left empty, no address is announced.",
      "name": "getPublicAddressCmd"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The package providing bitcoin binaries.",
      "name": "package"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Extra lines appended to {file}`bitcoin.conf`.",
      "name": "extraConfig"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/bitcoind",
      "description": "The data directory for bitcoind.",
      "name": "dataDir"
    },
    {
      "name": "rpc",
      "options": [
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "127.0.0.1",
          "description": "Address to listen for JSON-RPC connections.",
          "name": "address"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": 8332,
          "description": "Port to listen for JSON-RPC connections.",
          "name": "port"
        },
        {
          "isList": false,
          "isOptional": true,
          "type": "number",
          "description": "The number of threads to service RPC calls.",
          "name": "threads"
        },
        {
          "isList": true,
          "isOptional": false,
          "type": "str",
          "default": [
            "127.0.0.1"
          ],
          "description": "Allow JSON-RPC connections from specified sources.",
          "name": "allowip"
        },
        {
          "description": "Allowed users for JSON-RPC connections.",
          "name": "users"
        }
      ]
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Enable regtest mode.",
      "name": "regtest"
    },
    {
      "name": "network"
    },
    {
      "name": "makeNetworkName"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Connect through SOCKS5 proxy",
      "name": "proxy"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "select",
      "description": "Enable peer connections via i2p.\nWith `only-outgoing`, incoming i2p connections are disabled.",
      "name": "i2p"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "If enabled, data dir content is readable by the bitcoind service group.\nWarning: This disables bitcoind's wallet support.",
      "name": "dataDirReadableByGroup"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "bool",
      "description": "Create new files with system default permissions, instead of umask 077\n(only effective with disabled wallet functionality)",
      "name": "sysperms"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "bool",
      "description": "Do not load the wallet and disable wallet RPC calls",
      "name": "disablewallet"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Override the default database cache size in MiB.",
      "name": "dbCache"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "number",
      "default": 0,
      "description": "Automatically prune block files to stay under the specified target size in MiB.\nValue 0 disables pruning.",
      "name": "prune"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Enable the transaction index.",
      "name": "txindex"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "ZMQ address for zmqpubrawblock notifications",
      "name": "zmqpubrawblock"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "ZMQ address for zmqpubrawtx notifications",
      "name": "zmqpubrawtx"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "If this block is in the chain assume that it and its ancestors are\nvalid and potentially skip their script verification.",
      "name": "assumevalid"
    },
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [],
      "description": "Add nodes to connect to and attempt to keep the connections open",
      "name": "addnodes"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "bool",
      "description": "Discover own IP addresses",
      "name": "discover"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "The type of addresses to use",
      "name": "addresstype"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "bitcoin",
      "description": "The user as which to run bitcoind.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run bitcoind.",
      "name": "group"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "Binary to connect with the bitcoind instance.",
      "name": "cli"
    }
  ]
}
### file btcpayserver.nix
### file.lines 280
### result {
  "service": "services",
  "options": [
    {
      "name": "btcpayserver",
      "options": [
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "127.0.0.1",
          "description": "Address to listen on.",
          "name": "address"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": 23000,
          "description": "Port to listen on.",
          "name": "port"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "description": "The package providing btcpayserver binaries.",
          "name": "package"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "/var/lib/btcpayserver",
          "description": "The data directory for btcpayserver.",
          "name": "dataDir"
        },
        {
          "isList": false,
          "isOptional": true,
          "type": "str",
          "description": "The lightning node implementation to use.",
          "name": "lightningBackend"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "bool",
          "description": "Enable liquid support in btcpayserver.",
          "name": "lbtc"
        },
        {
          "isList": false,
          "isOptional": true,
          "type": "str",
          "description": "The prefix for root-relative btcpayserver URLs.",
          "name": "rootpath"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "btcpayserver",
          "description": "The user as which to run btcpayserver.",
          "name": "user"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "description": "The group as which to run btcpayserver.",
          "name": "group"
        }
      ]
    },
    {
      "name": "nbxplorer",
      "options": [
        {
          "description": "nbxplorer is always enabled when btcpayserver is enabled.",
          "name": "enable"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "description": "The package providing nbxplorer binaries.",
          "name": "package"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "127.0.0.1",
          "description": "Address to listen on.",
          "name": "address"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": 24444,
          "description": "Port to listen on.",
          "name": "port"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "/var/lib/nbxplorer",
          "description": "The data directory for nbxplorer.",
          "name": "dataDir"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "nbxplorer",
          "description": "The user as which to run nbxplorer.",
          "name": "user"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "description": "The group as which to run nbxplorer.",
          "name": "group"
        }
      ]
    }
  ]
}
### file charge-lnd.nix
### file.lines 142
### result {
  "service": "services.charge-lnd",
  "options": [
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [],
      "description": "Extra flags to pass to the charge-lnd command.",
      "name": "extraFlags"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "*-*-* 04:00:00",
      "description": "Systemd calendar expression when to adjust fees.\n\nSee {man}`systemd.time(7)` for possible values.\n\nDefault is once a day.",
      "name": "interval"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "1h",
      "description": "Random delay to add to scheduled time.",
      "name": "randomDelay"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Policy definitions in INI format.\n\nSee https://github.com/accumulator/charge-lnd/blob/master/README.md#usage\nfor possible properties and parameters.\n\nPolicies are evaluated from top to bottom.\nThe first matching policy (or `default`) is applied.",
      "name": "policies"
    }
  ]
}
### file clightning-replication.nix
### file.lines 231
### result {
  "service": "services.clightning.replication",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Enable live replication of the clightning database.\nThis prevents losing off-chain funds when the primary wallet file becomes\ninaccessible.\n\nFor setting the destination, you can either define option `sshfs.destination`\nor `local.directory`.\n\nWhen `encrypt` is `false`, file `lightningd.sqlite3` is written to the destination.\nWhen `encrypt` is `true`, directory `lightningd-db` is written to the destination.\nIt includes the encrypted database and gocryptfs metadata.\n\nSee also: https://github.com/ElementsProject/lightning/blob/master/doc/BACKUP.md",
      "name": "enable"
    },
    {
      "name": "sshfs",
      "options": [
        {
          "isList": false,
          "isOptional": true,
          "type": "str",
          "description": "The SSH destination for which a SSHFS will be mounted.\n`directory` is relative to the home of `user`.\n\nA SSH key is automatically generated and stored in file\n`$secretsDir/clightning-replication-ssh`.\nThe SSH server must allow logins via this key.\nI.e., the `authorized_keys` file of `user` must contain\n`$secretsDir/clightning-replication-ssh.pub`.",
          "name": "destination"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": 22,
          "description": "SSH port of the remote server.",
          "name": "port"
        },
        {
          "isList": true,
          "isOptional": false,
          "type": "str",
          "default": [
            "reconnect",
            "ServerAliveInterval=50"
          ],
          "description": "SSH options used for mounting the SSHFS.",
          "name": "sshOptions"
        }
      ]
    },
    {
      "name": "local",
      "options": [
        {
          "isList": false,
          "isOptional": true,
          "type": "str",
          "description": "This option can be specified instead of `sshfs.destination` to enable\nreplication to a local directory.\n\nIf `local.setupDirectory` is disabled, the directory\n- must already exist when `clightning.service` (or `clightning-replication-mounts.service`\nif `encrypt` is `true`) starts.\n- must have write permissions for the `clightning` user.\n\nThis option is also useful if you want to use a custom remote destination,\nlike a NFS or SMB share.",
          "name": "directory"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "bool",
          "description": "Create `local.directory` if it doesn't exist and set write permissions\nfor the `clightning` user.",
          "name": "setupDirectory"
        }
      ]
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Whether to encrypt the replicated database with gocryptfs.\nThe encryption password is automatically generated and stored\nin file {file}`$secretsDir/clightning-replication-password`.",
      "name": "encrypt"
    }
  ]
}
### file clightning-rest.nix
### file.lines 106
### result {
  "service": "services.clightning-rest",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 3001,
      "description": "REST server port.",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 4001,
      "description": "Swagger API documentation server port.",
      "name": "docPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/clightning-rest",
      "description": "The data directory for clightning-rest.",
      "name": "dataDir"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "attrs",
      "description": "Extra config options.\nSee: https://github.com/Ride-The-Lightning/c-lightning-REST#option-1-via-config-file-cl-rest-configjson",
      "name": "extraConfig"
    },
    {
      "description": "The group under which clightning-rest is run.",
      "name": "group"
    },
    {
      "default": "0.0.0.0",
      "name": "address"
    }
  ]
}
### file clightning.nix
### file.lines 208
### result {
  "service": "services.clightning",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for peer connections.",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 9735,
      "description": "Port to listen for peer connections.",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Socks proxy for connecting to Tor nodes (or for all connections if option always-use-proxy is set).",
      "name": "proxy"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Always use the proxy, even to connect to normal IP addresses.\nYou can still connect to Unix domain sockets manually.\nThis also disables all DNS lookups, to avoid leaking address information.",
      "name": "always-use-proxy"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/clightning",
      "description": "The data directory for clightning.",
      "name": "dataDir"
    },
    {
      "default": "${cfg.dataDir}/${network}",
      "description": "The network data directory.",
      "name": "networkDir"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Wallet data scheme (sqlite3 or postgres) and location/connection\nparameters, as fully qualified data source name.",
      "name": "wallet"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Use bitcoind (via plugin `bcli`) for getting block data.\nThis option is disabled by plugins that use other sources for\nfetching block data, like `trustedcoin`.",
      "name": "useBcliPlugin"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Extra lines appended to the configuration file.\n\nSee all available options at\nhttps://github.com/ElementsProject/lightning/blob/master/doc/lightningd-config.5.md\nor by running {command}`lightningd --help`.",
      "name": "extraConfig"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "clightning",
      "description": "The user as which to run clightning.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run clightning.",
      "name": "group"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The package providing clightning binaries.",
      "name": "package"
    },
    {
      "description": "Binary to connect with the clightning instance.",
      "name": "cli"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "",
      "description": "Bash expression which outputs the public service address to announce to peers.\nIf left empty, no address is announced.",
      "name": "getPublicAddressCmd"
    }
  ]
}
### file electrs.nix
### file.lines 107
### result {
  "service": "services.electrs",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for RPC connections.",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 50001,
      "description": "Port to listen for RPC connections.",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/electrs",
      "description": "The data directory for electrs.",
      "name": "dataDir"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 4224,
      "description": "Prometheus monitoring port.",
      "name": "monitoringPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "",
      "description": "Extra command line arguments passed to electrs.",
      "name": "extraArgs"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "electrs",
      "description": "The user as which to run electrs.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run electrs.",
      "name": "group"
    }
  ]
}
### file fulcrum.nix
### file.lines 141
### result {
  "service": "services.fulcrum",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Enable fulcrum, an Electrum server implemented in C++.\n\nCompared to electrs, fulcrum has a 3x larger database size but\ncan serve arbitrary address queries instantly.\n\nfulcrum also enables `txindex` in bitcoind (this is a requirement),\nwhich increases the bitcoind datadir size by 8% of the `blocks` size.\n\nThis module disables peering (a distributed list of electrum servers that can\nbe queried by clients), but you can manually enable it via option\n{option}`extraConfig`.",
      "name": "enable"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for RPC connections.",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 50001,
      "description": "Port to listen for RPC connections.",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/fulcrum",
      "description": "The data directory for fulcrum.",
      "name": "dataDir"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Extra lines appended to the configuration file.\n\nSee all available options at\nhttps://github.com/cculianu/Fulcrum/blob/master/doc/fulcrum-example-config.conf",
      "name": "extraConfig"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "fulcrum",
      "description": "The user as which to run fulcrum.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run fulcrum.",
      "name": "group"
    }
  ]
}
### file hardware-wallets.nix
### file.lines 85
### result {
  "service": "services.hardware-wallets",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "If enabled, the ledger udev rules will be installed.",
      "name": "ledger"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "If enabled, the trezor udev rules will be installed.",
      "name": "trezor"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "hardware-wallets",
      "description": "Group the hardware wallet udev rules apply to.",
      "name": "group"
    }
  ]
}
### file joinmarket-ob-watcher.nix
### file.lines 120
### result {
  "service": "services.joinmarket-ob-watcher",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "HTTP server address.",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 62601,
      "description": "HTTP server port.",
      "name": "port"
    },
    {
      "default": "/var/lib/joinmarket-ob-watcher",
      "description": "The data directory for JoinMarket orderbook watcher.",
      "name": "dataDir"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "joinmarket-ob-watcher",
      "description": "The user as which to run JoinMarket.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run JoinMarket.",
      "name": "group"
    }
  ]
}
### file joinmarket.nix
### file.lines 409
### result {
  "service": "services.joinmarket",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "The address where payjoin onion connections are forwarded to.\nThis address is never used directly, it only serves as the internal endpoint\nfor the payjoin onion service.\nThe onion service is automatically setup by joinmarket and accepts\nconnections at port 80.",
      "name": "payjoinAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The port corresponding to option {option}`payjoinAddress`.",
      "name": "payjoinPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "The address where messaging onion connections are forwarded to.\nThis address is never used directly, it only serves as the internal endpoint\nfor the messaging onion service.\nThe onion service is automatically setup by joinmarket.",
      "name": "messagingAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The port corresponding to option {option}`messagingAddress`.",
      "name": "messagingPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/joinmarket",
      "description": "The data directory for JoinMarket.",
      "name": "dataDir"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "default": "jm_wallet",
      "description": "Name of the watch-only bitcoind wallet the JoinMarket addresses are imported to.",
      "name": "rpcWalletFile"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "joinmarket",
      "description": "The user as which to run JoinMarket.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run JoinMarket.",
      "name": "group"
    },
    {
      "name": "cli"
    },
    {
      "name": "messagingConfig"
    },
    {
      "name": "yieldgenerator",
      "options": [
        {
          "isList": false,
          "isOptional": false,
          "type": "select",
          "default": "reloffer",
          "description": "Which fee type to actually use.",
          "name": "ordertype"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "number",
          "default": 500,
          "description": "Absolute offer fee you wish to receive for coinjoins (cj) in Satoshis.",
          "name": "cjfee_a"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "number",
          "default": 0.00002,
          "description": "Relative offer fee you wish to receive based on a cj's amount.",
          "name": "cjfee_r"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "number",
          "default": 0.1,
          "description": "Variance around the average cj fee.",
          "name": "cjfee_factor"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "number",
          "default": 100,
          "description": "The average transaction fee you're adding to coinjoin transactions.",
          "name": "txfee"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "number",
          "default": 0.3,
          "description": "Variance around the average tx fee.",
          "name": "txfee_contribution_factor"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "number",
          "default": 100000,
          "description": "Minimum size of your cj offer in Satoshis. Lower cj amounts will be disregarded.",
          "name": "minsize"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "number",
          "default": 0.1,
          "description": "Variance around all offer sizes.",
          "name": "size_factor"
        }
      ]
    }
  ]
}
### file lightning-loop.nix
### file.lines 148
### result {
  "service": "services.lightning-loop",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for gRPC connections.",
      "name": "rpcAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 11010,
      "description": "Port to listen for gRPC connections.",
      "name": "rpcPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "Address to listen for REST connections.",
      "name": "restAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 8081,
      "description": "Port to listen for REST connections.",
      "name": "restPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The package providing lightning-loop binaries.",
      "name": "package"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/lightning-loop",
      "description": "The data directory for lightning-loop.",
      "name": "dataDir"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "`host:port` of SOCKS5 proxy for connnecting to the loop server.",
      "name": "proxy"
    },
    {
      "name": "certificate",
      "options": [
        {
          "isList": true,
          "isOptional": false,
          "type": "str",
          "default": [],
          "description": "Extra `subjectAltName` IPs added to the certificate.\nThis works the same as loop option {option}`tlsextraip`.",
          "name": "extraIPs"
        },
        {
          "isList": true,
          "isOptional": false,
          "type": "str",
          "default": [],
          "description": "Extra `subjectAltName` domain names added to the certificate.\nThis works the same as loop option {option}`tlsextradomain`.",
          "name": "extraDomains"
        }
      ]
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Extra lines appended to the configuration file.\nSee here for all available options:\nhttps://github.com/lightninglabs/loop/blob/11ab596080e9d36f1df43edbeba0702b25aa7457/loopd/config.go#L119",
      "name": "extraConfig"
    },
    {
      "description": "Binary to connect with the lightning-loop instance.",
      "name": "cli"
    }
  ]
}
### file lightning-pool.nix
### file.lines 112
### result {
  "service": "services.lightning-pool",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for gRPC connections.",
      "name": "rpcAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 12010,
      "description": "Port to listen for gRPC connections.",
      "name": "rpcPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "Address to listen for REST connections.",
      "name": "restAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 8281,
      "description": "Port to listen for REST connections.",
      "name": "restPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The package providing lightning-pool binaries.",
      "name": "package"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/lightning-pool",
      "description": "The data directory for lightning-pool.",
      "name": "dataDir"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "host:port of SOCKS5 proxy for connnecting to the pool auction server.",
      "name": "proxy"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Extra lines appended to the configuration file.",
      "name": "extraConfig"
    },
    {
      "description": "Binary to connect with the lightning-pool instance.",
      "name": "cli"
    }
  ]
}
### file liquid.nix
### file.lines 295
### result {
  "service": "liquidd",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for peer connections.",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 7042,
      "description": "Override the default port on which to listen for connections.",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Port to listen for Tor peer connections.\nIf set, inbound connections to this port are tagged as onion peers.",
      "name": "onionPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Listen for peer connections at `address:port`\nand `address:onionPort` (if {option}`onionPort` is set).",
      "name": "listen"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Listen for peer connections at `address:whitelistedPort`.\nPeers connected through this socket are automatically whitelisted.",
      "name": "listenWhitelisted"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 7044,
      "description": "See {option}`listenWhitelisted`.",
      "name": "whitelistedPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Extra lines appended to {file}`elements.conf`.",
      "name": "extraConfig"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/liquidd",
      "description": "The data directory for liquidd.",
      "name": "dataDir"
    },
    {
      "name": "rpc",
      "options": [
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": "127.0.0.1",
          "description": "Address to listen for JSON-RPC connections.",
          "name": "address"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "default": 7041,
          "description": "Port to listen for JSON-RPC connections.",
          "name": "port"
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "str",
          "description": "RPC user information for JSON-RPC connections.",
          "name": "users"
        }
      ]
    },
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [
        "127.0.0.1"
      ],
      "description": "Allow JSON-RPC connections from specified source.",
      "name": "rpcallowip"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "liquidrpc",
      "description": "Username for JSON-RPC connections",
      "name": "rpcuser"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Connect through SOCKS5 proxy",
      "name": "proxy"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Override the default database cache size in megabytes.",
      "name": "dbCache"
    },
    {
      "description": "Reduce storage requirements by enabling pruning (deleting) of old\nblocks. This allows the pruneblockchain RPC to be called to delete\nspecific blocks, and enables automatic pruning of old blocks if a\ntarget size in MiB is provided. This mode is incompatible with -txindex\nand -rescan. Warning: Reverting this setting requires re-downloading\nthe entire blockchain. (`disable` = disable pruning blocks, `manual`\n= allow manual pruning via RPC, >=550 = automatically prune block files\nto stay under the specified target size in MiB)",
      "name": "prune"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "bool",
      "description": "Validate pegin claims. All functionaries must run this.",
      "name": "validatepegin"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "liquid",
      "description": "The user as which to run liquidd.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run liquidd.",
      "name": "group"
    },
    {
      "description": "Binary to connect with the liquidd instance.",
      "name": "cli"
    },
    {
      "description": "Binary for managing liquid swaps.",
      "name": "swapCli"
    }
  ]
}
### file lnd.nix
### file.lines 333
### result {
  "service": "services.lnd",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for peer connections",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 9735,
      "description": "Port to listen for peer connections",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for RPC connections.",
      "name": "rpcAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 10009,
      "description": "Port to listen for gRPC connections.",
      "name": "rpcPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "Address to listen for REST connections.",
      "name": "restAddress"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 8080,
      "description": "Port to listen for REST connections.",
      "name": "restPort"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/lnd",
      "description": "The data directory for LND.",
      "name": "dataDir"
    },
    {
      "default": "${cfg.dataDir}/chain/bitcoin/${bitcoind.network}",
      "description": "The network data directory.",
      "name": "networkDir"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Socks proxy for connecting to Tor nodes",
      "name": "tor-socks"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "Extra macaroon definitions.",
      "name": "macaroons"
    },
    {
      "name": "certificate",
      "options": [
        {
          "isList": true,
          "isOptional": false,
          "type": "str",
          "default": [],
          "description": "Extra `subjectAltName` IPs added to the certificate.\nThis works the same as lnd option {option}`tlsextraip`.",
          "name": "extraIPs"
        },
        {
          "isList": true,
          "isOptional": false,
          "type": "str",
          "default": [],
          "description": "Extra `subjectAltName` domain names added to the certificate.\nThis works the same as lnd option {option}`tlsextradomain`.",
          "name": "extraDomains"
        }
      ]
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "text",
      "default": "",
      "description": "Extra lines appended to {file}`lnd.conf`.\nSee here for all available options:\nhttps://github.com/lightningnetwork/lnd/blob/master/sample-lnd.conf",
      "name": "extraConfig"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The package providing lnd binaries.",
      "name": "package"
    },
    {
      "description": "Binary to connect with the lnd instance.",
      "name": "cli"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "",
      "description": "Bash expression which outputs the public service address to announce to peers.\nIf left empty, no address is announced.",
      "name": "getPublicAddressCmd"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "lnd",
      "description": "The user as which to run LND.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run LND.",
      "name": "group"
    },
    {
      "default": "${secretsDir}/lnd-cert",
      "description": "LND TLS certificate path.",
      "name": "certPath"
    }
  ]
}
### file lndconnect.nix
### file.lines 206
### result {
  "service": "lnd.lndconnect",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Add a `lndconnect` binary to the system environment which prints\nconnection info for lnd clients.\nSee: https://github.com/LN-Zap/lndconnect\n\nUsage:\n```bash\n# Print QR code\nlndconnect\n\n# Print URL\nlndconnect --url\n```",
      "name": "enable"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Create an onion service for the lnd REST server,\nwhich is used by lndconnect.",
      "name": "onion"
    }
  ]
}
### file modules.nix
### file.lines 43
### result {
  "service": "",
  "options": []
}
### file netns-isolation.nix
### file.lines 355
### result {
  "service": "nix-bitcoin.netns-isolation",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "number",
      "default": 1,
      "description": "The address block N in 169.254.N.0/24, used as the prefix for netns addresses.",
      "name": "addressblock"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "number",
      "description": "id for the netns, used for the IP address host part and\nfor naming the interfaces. Must be unique. Must be greater than 10.\n'';\n};\nconnections = mkOption {\ntype = with types; listOf str;\ndefault = [];\n};\n};",
      "name": "services"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "User that is allowed to execute commands in the service network namespaces.\nThe user's group is also authorized.",
      "name": "allowedUser"
    },
    {
      "description": "Exposes netns parameters.",
      "name": "netns"
    },
    {
      "description": "IP of the netns bridge interface.",
      "name": "bridgeIp"
    }
  ]
}
### file nix-bitcoin.nix
### file.lines 61
### result {
  "service": "",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "attrs",
      "name": "pkgs"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "attrs",
      "name": "pkgOverlays"
    },
    {
      "name": "lib"
    },
    {
      "name": "torClientAddressWithPort"
    },
    {
      "name": "torify"
    },
    {
      "name": "runAsUserCmd"
    }
  ]
}
### file nodeinfo.nix
### file.lines 159
### result {
  "service": "",
  "options": [
    {
      "name": "program"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "attrs",
      "description": "Nodeinfo service definitions.",
      "name": "services"
    },
    {
      "description": "Helper functions for defining nodeinfo services.",
      "name": "lib"
    }
  ]
}
### file obsolete-options.nix
### file.lines 129
### result {
  "service": "",
  "options": []
}
### file onion-addresses.nix
### file.lines 107
### result {
  "service": "nix-bitcoin.onionAddresses",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "This option controls who is allowed to access onion addresses.\nFor example, the following allows user 'myuser' to access bitcoind\nand clightning onion addresses:\n```nix\n{\n\"myuser\" = [ \"bitcoind\" \"clightning\" ];\n};\n```\nThe onion hostnames can then be read from\n{file}`/var/lib/onion-addresses/myuser`.",
      "name": "access"
    },
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [],
      "description": "Services that can access their onion address via file\n{file}`/var/lib/onion-addresses/<service>`\nThe file is readable only by the service user.",
      "name": "services"
    },
    {
      "default": "/var/lib/onion-addresses",
      "name": "dataDir"
    }
  ]
}
### file onion-services.nix
### file.lines 120
### result {
  "service": "nix-bitcoin.onionServices",
  "options": [
    {
      "name": "options",
      "options": [
        {
          "isList": false,
          "isOptional": false,
          "type": "bool",
          "description": "Create an onion service for the given service.\nThe service must define options {option}'address' and {option}'onionPort' (or `port`).\n'';\n};\npublic = mkOption {\ntype = types.bool;\ndefault = false;\ndescription = mdDoc ''\nMake the onion address accessible to the service.\nIf enabled, the onion service is automatically enabled.\nOnly available for services that define option {option}`getPublicAddressCmd`.\n'';\n};\nexternalPort = mkOption {\ntype = types.nullOr types.port;\ndefault = null;\ndescription = mdDoc \"Override the external port of the onion service.\";\n};",
          "name": "enable"
        }
      ]
    }
  ]
}
### file operator.nix
### file.lines 59
### result {
  "service": "nix-bitcoin.operator",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Whether to define a user named `operator` for convenient interactive access\nto nix-bitcoin features (like `bitcoin-cli`).\n\nWhen using nix-bitcoin as part of a larger system config, it makes sense\nto set your main system user as the operator, by setting option\n`nix-bitcoin.operator.name = \"MAIN_USER_NAME\";`.",
      "name": "enable"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "operator",
      "description": "Name of the operator user.",
      "name": "name"
    },
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [],
      "description": "Extra groups of the operatur user.",
      "name": "groups"
    },
    {
      "isList": true,
      "isOptional": false,
      "type": "str",
      "default": [],
      "description": "Users as which the operator is allowed to run commands.",
      "name": "allowRunAsUsers"
    }
  ]
}
### file rtl.nix
### file.lines 233
### result {
  "service": "services.rtl",
  "options": [
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "127.0.0.1",
      "description": "HTTP server address.",
      "name": "address"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": 3000,
      "description": "HTTP server port.",
      "name": "port"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "/var/lib/rtl",
      "description": "The data directory for RTL.",
      "name": "dataDir"
    },
    {
      "name": "nodes",
      "options": [
        {
          "name": "clightning",
          "options": [
            {
              "isList": false,
              "isOptional": false,
              "type": "bool",
              "description": "Enable the clightning node interface.",
              "name": "enable"
            },
            {
              "isList": false,
              "isOptional": false,
              "type": "str",
              "description": "Extra clightning node configuration.\nSee here for all available options:\nhttps://github.com/Ride-The-Lightning/RTL/blob/master/.github/docs/Application_configurations.md",
              "name": "extraConfig"
            }
          ]
        },
        {
          "name": "lnd",
          "options": [
            {
              "isList": false,
              "isOptional": false,
              "type": "bool",
              "description": "Enable the lnd node interface.",
              "name": "enable"
            },
            {
              "isList": false,
              "isOptional": false,
              "type": "bool",
              "description": "Enable swaps with lightning-loop.",
              "name": "loop"
            },
            {
              "isList": false,
              "isOptional": false,
              "type": "str",
              "description": "Extra lnd node configuration.\nSee here for all available options:\nhttps://github.com/Ride-The-Lightning/RTL/blob/master/.github/docs/Application_configurations.md",
              "name": "extraConfig"
            }
          ]
        },
        {
          "isList": false,
          "isOptional": false,
          "type": "bool",
          "description": "Reverse the order of nodes shown in the UI.\nBy default, clightning is shown before lnd.",
          "name": "reverseOrder"
        }
      ]
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "bool",
      "description": "Enable the Night UI Theme.",
      "name": "nightTheme"
    },
    {
      "isList": false,
      "isOptional": true,
      "type": "str",
      "description": "Currency code (ISO 4217) of the extra currency used for displaying balances.\nWhen set, this option enables online currency rate fetching.\nWarning: Rate fetching requires outgoing clearnet connections, so option\n{option}`tor.enforce` is automatically disabled.",
      "name": "extraCurrency"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "default": "rtl",
      "description": "The user as which to run RTL.",
      "name": "user"
    },
    {
      "isList": false,
      "isOptional": false,
      "type": "str",
      "description": "The group as which to run RTL.",
      "name": "group"
    }
  ]
}
### file security.nix
### file.lines 49
### result {
  "service": "",
  "options": []
}
### file versioning.nix
### file.lines 293
### result {
  "service": "",
  "options": []
}
moto@Vlads-MacBook-Pro lnbits %
